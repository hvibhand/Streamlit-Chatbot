from enum import Enum


class LanguageType(Enum):
    KOTLIN = ("Kotlin", [
            {"role":"system","content":"Assume that you are Android Developer(Using Kotlin Language) heaving excellent knowledge in Kotlin, Coroutines and Mokito and you are highly experienced in writing the Unit test case., and you Need to write the Unit test case that cover All Possible Scenario( Like Null check, valid response and invalid response) of Function.To Achive this you need to use Mockito and Junit Library.\n\nYou need to use below Library for Mokito and Junit\n//Mockk\ntestImplementation \"io.mockk:mockk:1.12.4\"\n\n//Mockito\ntestImplementation \"org.mockito:mockito-core:4.0.0\"\ntestImplementation \"org.mockito:mockito-inline:4.0.0\"\ntestImplementation \"org.mockito.kotlin:mockito-kotlin:4.0.0\".\n\nMake sure test case always written in Class"},
            {"role":"user","content":"fun ResourceLoader.getTextContent(location:String) : String {\n    val resource = this.getResource(location)\n    return IOUtils.toString(FileReader(resource.file))\n}"},
            {"role":"assistant","content":"@Test\n    fun `it should result textual content`() {\n        val mock = Mockito.mock(ResourceLoader::class.java)\n        Mockito.doReturn(\"hello world!\").`when`(mock).getTextContent(\"myfile\")\n \n        val result = mock.getTextContent(\"myfile\")\n        MatcherAssert.assertThat(result,Matchers.equalTo(\"hello world!\"))\n    }"},
            {"role":"user","content":"fun String.removeSpace() : String {\nreturn this.replace(\"\\\\s+\".toRefex(),\"\")"},
            {"role":"assistant","content":"import org.junit.Assert\nimport org.junit.Test\n\nclass StringExtensionTest {\n\n    @Test\n    fun `Given string with spaces, when removeSpace is called, then return string without spaces`() {\n        // Given\n        val stringWithSpaces = \"Hello World\"\n\n        // When\n        val result = stringWithSpaces.removeSpace()\n\n        // Then\n        Assert.assertEquals(\"HelloWorld\", result)\n    }\n}"},
            {"role":"user","content":"﻿\nclass TestViewModel():ViewModel(){\nprivate fun addHeaderWrtAddressItem(data: MutableList<AddressItem>) {\nif (!data.contains(AddressItem (AddressType.HOME, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.PERMANENT, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.PERMANENT, AddressRowType.ADD_PERMANENT ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.MAILING, Address RowType.HEADER)))\ndata.addAll(addAddress(AddressType.MAILING, AddressRowType.ADD_MAILING))\n}\n\ndata.sortBy {\nwhen (it.addressType) {\nAddressType.HOME-> Constants.ZERO_COUNT\nAddressType.PERMANENT -> Constants.INT ONE\nAddressType.MAILING-> Constants.INT_TWO\nelse \nConstants.INT_NEGATIVE ONE\n}\n}\nreturn nonAadhaarAddressItemsData.value = data\n}\n\nprivate fun mapPermanentAddress(addressDetails: AddressDetails,data: MutableList<AddressItem>) {\n\taddressDetails.address Detail?.let {\n\t\t\t\tval fullAddress =\n\t\t\t\taddressDetails.addressDetail.convertToFullAddress( true, \n\t\t\t\tcallback.getDeviceLocale())\n\tdata.apply {\n\t\tadd (AddressItem(Address Type.PERMANENT, AddressRowType.HEADER))\n\t\tadd(createAddressItem (AddressType.PERMANENT, addressDetails, fullAddress))\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\n\t\t\n﻿\nfun setNonAadhaarAddressItem(addressItems: List<Address Details>, address: List<AddressItem>) {\nval data = mutableListOf<AddressItem>()\ndata.addAll(address)\n(addressItems as MutableList<Address Details>).let {\nnonAadhaarAddressDetailsList.value = it\n}\n\naddressItems.forEach { addressItem -> when (addressItem.purpose) {\nAddressType.PERMANENT.getValue()->{ mapPermanent Address (addressItem, data)\n}\n}\n}\naddHeaderWrtAddressItem(data)\n}\n\n\n﻿\nclass CustomerContactMockData {\ncompanion object {\nfun getNonAadhaarAddressItems(): List<AddressDetails> {\nval addressDetail AddressDetail (street1= \"a\", street2= \"b\", street3= \"c\", street4 = \"d\", street = \"e\", postalCode=\"f\",countryCode = \"g\", city=\"h\", provinceCode=\"i\", addressFormat = \"j\", countryName=\"k\", addressUsabilityCode = \"1\", type=\"n\", label = \"n\")\nval addressDetaill = AddressDetails (purpose\nval addressDetail2 = AddressDetails (purpose\nAddressType.HOME.getValue(), addressDetail addressDetail) AddressType.PERMANENT.getValue(), addressDetail addressDetail) AddressType.MAILING.getValue(), address Detail addressDetail)\nval addressDetails]= AddressDetails (purpose\nreturn arrayListOf(addressDetail1, addressDetail2, addressDetail3)\n}\n\nfun getAddressTypeItems(): List<AddressItem> {\nval addressDetail AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", address Type AddressType.HOME, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail1 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.PERMANENT, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail2 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.MAILING, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nreturn arrayListOf(addressDetail, addressDetail1, addressDetail2)\n}\n}\n}\n\n\n\n﻿"},
            {"role":"assistant","content":"@RunWith(MockitoJunitRunner::class)\nclass UnitTestExampleClass{\n    @get:Rule\n    val rule = InstantTaskExecuterRule()\n    \n    private lateinit var viewModel: COAViewModel\n    \n    @Before\n    fun setup() {\n        viewModel = COAViewModel()\n    }\n    \n    @Test\nfun setNonAadhaarAddressItem() {\n\tMockito.doReturn(Locale( language: \"en\", country: \"IN\")). 'when' (callback).getDeviceLocale()\n    viewModel.setNonAadhaarAddressItem(\n        CustomerContactMockData.getNonAadhaarAddressItems(),\n\t\tCustomerContactRockData.getAddressTypeItems())\n    assert(viewModel.getNonAadhaarAddressItemData().value?.size == 9)\n    assert(viewModel.getNonAadhaar AddressItemData().value?.get(8)?.addressRowType == AddressRowType.HEADER) assert(viewModel.getNonAadhaarAddressItemData().value?.get(1)?.address RowType == AddressRowType.HEADER)\n\tassert(viewModel.getNonAadhaar AddressItemData().value?.get(2)?.addressRowType == AddressRowType.ADD_HOME_ADDRESS) assert(viewModel.getNonAadhaarAddressItemData().value?.get(3)?.addressRowType == AddressRowType.HEADER) assert(viewModel.getNonAadhaarAddressItemData().value?.get(4)?.addressRowType == AddressRowType.HEADER)\n\tassert(viewModel.getNonAadhaarAddressItemData().value?.get(5)?.address RowType == AddressRowType.UPDATE_ADDRESS) assert(viewModel.getNonAadhaarAddressItemData().value?.get(6)?.addressRowType == AddressRowType.HEADER) assert(viewModel.getNonAadhaarAddressItemData().value?.get(7)?.addressRowType == AddressRowType.HEADER)\n\tassert(viewModel.getNonAadhaarAddressItenData().value?.get(8)?.addressRowTypeAddressRowType.ADD MAILING)\n\t}\n}"},{"role":"user","content":"class TestViewModel():ViewModel(){\nprivate fun addHeaderWrtAddressItem(data: MutableList<AddressItem>) {\nif (!data.contains(AddressItem (AddressType.HOME, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.PERMANENT, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.PERMANENT, AddressRowType.ADD_PERMANENT ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.MAILING, Address RowType.HEADER)))\ndata.addAll(addAddress(AddressType.MAILING, AddressRowType.ADD_MAILING))\n}\n\ndata.sortBy {\nwhen (it.addressType) {\nAddressType.HOME-> Constants.ZERO_COUNT\nAddressType.PERMANENT -> Constants.INT ONE\nAddressType.MAILING-> Constants.INT_TWO\nelse \nConstants.INT_NEGATIVE ONE\n}\n}\nreturn nonAadhaarAddressItemsData.value = data\n}\n\nprivate fun mapPermanentAddress(addressDetails: AddressDetails,data: MutableList<AddressItem>) {\n\taddressDetails.address Detail?.let {\n\t\t\t\tval fullAddress =\n\t\t\t\taddressDetails.addressDetail.convertToFullAddress( true, \n\t\t\t\tcallback.getDeviceLocale())\n\tdata.apply {\n\t\tadd (AddressItem(Address Type.PERMANENT, AddressRowType.HEADER))\n\t\tadd(createAddressItem (AddressType.PERMANENT, addressDetails, fullAddress))\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\n\t\t\n﻿\nfun setNonAadhaarAddressItem(addressItems: List<Address Details>, address: List<AddressItem>) {\nval data = mutableListOf<AddressItem>()\ndata.addAll(address)\n(addressItems as MutableList<Address Details>).let {\nnonAadhaarAddressDetailsList.value = it\n}\n\naddressItems.forEach { addressItem -> when (addressItem.purpose) {\nAddressType.PERMANENT.getValue()->{ mapPermanent Address (addressItem, data)\n}\n}\n}\naddHeaderWrtAddressItem(data)\n}\n\n\n﻿\nclass CustomerContactMockData {\ncompanion object {\nfun getNonAadhaarAddressItems(): List<AddressDetails> {\nval addressDetail AddressDetail (street1= \"a\", street2= \"b\", street3= \"c\", street4 = \"d\", street = \"e\", postalCode=\"f\",countryCode = \"g\", city=\"h\", provinceCode=\"i\", addressFormat = \"j\", countryName=\"k\", addressUsabilityCode = \"1\", type=\"n\", label = \"n\")\nval addressDetaill = AddressDetails (purpose\nval addressDetail2 = AddressDetails (purpose\nAddressType.HOME.getValue(), addressDetail addressDetail) AddressType.PERMANENT.getValue(), addressDetail addressDetail) AddressType.MAILING.getValue(), address Detail addressDetail)\nval addressDetails]= AddressDetails (purpose\nreturn arrayListOf(addressDetail1, addressDetail2, addressDetail3)\n}\n\nfun getAddressTypeItems(): List<AddressItem> {\nval addressDetail AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", address Type AddressType.HOME, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail1 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.PERMANENT, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail2 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.MAILING, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nreturn arrayListOf(addressDetail, addressDetail1, addressDetail2)\n}\n}\n}"},{"role":"assistant","content":"@RunWith(MockitoJUnitRunner::class)\nclass TestViewModel {\n    @get:Rule\n    val rule = InstantTaskExecutorRule()\n    \n    private lateinit var viewModel: TestViewModel\n    \n    @Mock\n    private lateinit var addressItems: List<AddressDetails>\n    \n    @Mock\n    private lateinit var address: List<AddressItem>\n    \n    @Before\n    fun setup() {\n        MockitoAnnotations.initMocks(this)\n        viewModel = TestViewModel()\n    }\n    \n    @Test\n    fun setNonAadhaarAddressItem() {\n        val data = mutableListOf<AddressItem>()\n        \n        // Mock the behavior of the addressItems\n        Mockito.`when`(addressItems as MutableList).thenReturn(addressItems as MutableList<AddressDetails>)\n        \n        // Mock the behavior of the address list\n        Mockito.`when`(address.toMutableList()).thenReturn(data)\n        \n        // Call the method to be tested\n        viewModel.setNonAadhaarAddressItem(addressItems, address)\n        \n        // Verify that the methods were called correctly\n        Mockito.verify(addressItems as MutableList).let {\n            viewModel.nonAadhaarAddressDetailsList.value = it\n        }\n        \n        // Verify that the addHeaderWrtAddressItem method was called\n        Mockito.verify(viewModel).addHeaderWrtAddressItem(data)\n        \n        // Verify that the data list was modified correctly\n        assert(data.size == 3)\n        assert(data[0].addressRowType == AddressRowType.HEADER)\n        assert(data[1].addressRowType == AddressRowType.HEADER)\n        assert(data[2].addressRowType == AddressRowType.HEADER)\n    }\n    \n    @Test\n    fun addHeaderWrtAddressItem() {\n        val data = mutableListOf<AddressItem>()\n        \n        // Mock the behavior of the addAddress method\n        Mockito.`when`(viewModel.addAddress(AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS)).thenReturn(listOf(AddressItem(AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS)))\n        Mockito.`when`(viewModel.addAddress(AddressType.PERMANENT, AddressRowType.ADD_PERMANENT_ADDRESS)).thenReturn(listOf(AddressItem(AddressType.PERMANENT, AddressRowType.ADD_PERMANENT_ADDRESS)))\n        Mockito.`when`(viewModel.addAddress(AddressType.MAILING, AddressRowType.ADD_MAILING)).thenReturn(listOf(AddressItem(AddressType.MAILING, AddressRowType.ADD_MAILING)))\n        \n        // Call the method to be tested\n        viewModel.addHeaderWrtAddressItem(data)\n        \n        // Verify that the data list was modified correctly\n        assert(data.size == 3)\n        assert(data[0].addressType == AddressType.HOME)\n        assert(data[0].addressRowType == AddressRowType.ADD_HOME_ADDRESS)\n        assert(data[1].addressType == AddressType.PERMANENT)\n        assert(data[1].addressRowType == AddressRowType.ADD_PERMANENT_ADDRESS)\n        assert(data[2].addressType == AddressType.MAILING)\n        assert(data[2].addressRowType == AddressRowType.ADD_MAILING)\n    }\n    \n    @Test\n    fun mapPermanentAddress() {\n        val data = mutableListOf<AddressItem>()\n        val addressDetails = AddressDetails(purpose = AddressType.PERMANENT.getValue(), addressDetail = \"Permanent Address\")\n        \n        // Mock the behavior of the callback\n        Mockito.`when`(viewModel.callback.getDeviceLocale()).thenReturn(Locale(\"en\", \"IN\"))\n        \n        // Call the method to be tested\n        viewModel.mapPermanentAddress(addressDetails, data)\n        \n        // Verify that the data list was modified correctly\n        assert(data.size == 2)\n        assert(data[0].addressType == AddressType.PERMANENT)\n        assert(data[0].addressRowType == AddressRowType.HEADER)\n        assert(data[1].addressType == AddressType.PERMANENT)\n        assert(data[1].addressRowType == AddressRowType.ADD_PERMANENT_ADDRESS)"},
            {"role":"user","content":"﻿\nclass TestViewModel():ViewModel(){\nprivate fun addHeaderWrtAddressItem(data: MutableList<AddressItem>) {\nif (!data.contains(AddressItem (AddressType.HOME, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.PERMANENT, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.PERMANENT, AddressRowType.ADD_PERMANENT ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.MAILING, Address RowType.HEADER)))\ndata.addAll(addAddress(AddressType.MAILING, AddressRowType.ADD_MAILING))\n}\n\ndata.sortBy {\nwhen (it.addressType) {\nAddressType.HOME-> Constants.ZERO_COUNT\nAddressType.PERMANENT -> Constants.INT ONE\nAddressType.MAILING-> Constants.INT_TWO\nelse \nConstants.INT_NEGATIVE ONE\n}\n}\nreturn nonAadhaarAddressItemsData.value = data\n}\n\nprivate fun mapPermanentAddress(addressDetails: AddressDetails,data: MutableList<AddressItem>) {\n\taddressDetails.address Detail?.let {\n\t\t\t\tval fullAddress =\n\t\t\t\taddressDetails.addressDetail.convertToFullAddress( true, \n\t\t\t\tcallback.getDeviceLocale())\n\tdata.apply {\n\t\tadd (AddressItem(Address Type.PERMANENT, AddressRowType.HEADER))\n\t\tadd(createAddressItem (AddressType.PERMANENT, addressDetails, fullAddress))\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\n\t\t\n﻿\nfun setNonAadhaarAddressItem(addressItems: List<Address Details>, address: List<AddressItem>) {\nval data = mutableListOf<AddressItem>()\ndata.addAll(address)\n(addressItems as MutableList<Address Details>).let {\nnonAadhaarAddressDetailsList.value = it\n}\n\naddressItems.forEach { addressItem -> when (addressItem.purpose) {\nAddressType.PERMANENT.getValue()->{ mapPermanent Address (addressItem, data)\n}\n}\n}\naddHeaderWrtAddressItem(data)\n}\n\n\n﻿\nclass CustomerContactMockData {\ncompanion object {\nfun getNonAadhaarAddressItems(): List<AddressDetails> {\nval addressDetail AddressDetail (street1= \"a\", street2= \"b\", street3= \"c\", street4 = \"d\", street = \"e\", postalCode=\"f\",countryCode = \"g\", city=\"h\", provinceCode=\"i\", addressFormat = \"j\", countryName=\"k\", addressUsabilityCode = \"1\", type=\"n\", label = \"n\")\nval addressDetaill = AddressDetails (purpose\nval addressDetail2 = AddressDetails (purpose\nAddressType.HOME.getValue(), addressDetail addressDetail) AddressType.PERMANENT.getValue(), addressDetail addressDetail) AddressType.MAILING.getValue(), address Detail addressDetail)\nval addressDetails]= AddressDetails (purpose\nreturn arrayListOf(addressDetail1, addressDetail2, addressDetail3)\n}\n\nfun getAddressTypeItems(): List<AddressItem> {\nval addressDetail AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", address Type AddressType.HOME, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail1 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.PERMANENT, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail2 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.MAILING, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nreturn arrayListOf(addressDetail, addressDetail1, addressDetail2)\n}\n}\n}\n\n\nenum class OTPRequestType: RequestType {\nOTP GENERATION,\nOTP_VERIFICATION,\nOTP STATUS\n}\n\n﻿\n\nclass OtpViewModel @Inject constructor(\nprivate val apiInteractor: OTPApiInteractor,\nprivate val contactDetailsCallbac: Contact DetailsCallback\n): ViewModel() {\n\nval otpGenerationMutableLiveData by lazy {SingleLiveEvent<UiStates<OTPGenerator ResponseModel>>() }\n\nfun get0tpGenerationLiveData() = otpGenerationMutableLiveData.asLiveData()\n\nval otpStatusMutableLiveData by lazy SingleLiveEvent<UiStates<0tpStatus ResponseModel>>() }\nfun getOtpStatusLiveData() = otpStatusMutableLiveData.asLiveData()\n\n@VisibleForTesting\nfun getConfigIdentifier (itemType: ContactType?)= when (itemType) {\nContactType.EMAIL, ContactType.ADD_EMAIL -> {\nOtpViewModel.UPDATE_EMAIL\n}\n\nContactType.PHONE -> {\nOtpViewModel.UPDATE_PHONE\n}\n\nelse -> Constants. EMPTY\n}\n\n\n@VisibleForTesting\nfun update0TPGenerationViewState (uiStates: UiStates<OTPGeneratorResponseModel>) { \notpGenerationMutableLiveData.value = uiStates\n}\n\n\n@visibleForTesting(otherwise VisibleForTesting.PRIVATE)\nfun update0tpStatusViewState(success: UiStates.Success<0tpStatusResponseModel>) {\notpStatusMutableLiveData.value = success\n}\n\n\n\n@VisibleForTesting (otherwise VisibleForTesting.PRIVATE)\nfun getOtpStatus(otpGenerationResponse: OTPGeneratorResponseModel, itenType: ContactType?= null) {\nviewModelScope. Launch {\nval result apiInteractor.getOtpStatus(OtpStatusRequestModel(getConfigIdentifier (itenType))) \nif (result is Result.Success){\nupdateOTPGenerationViewState (UiStates. Success (otpGenerationResponse))\nupdateDtpStatusViewState (UiStates. Success (result.data))\n}\n}\n\n\n\n\n﻿"},
            {"role":"assistant","content":"\n@RunWith(MockitoJUnitRunner::class)\nclass OtpViewModelTest {\n\n    @get:Rule\n    var instantTaskExecutorRule = InstantTaskExecutorRule()\n\n    @Mock\n    private lateinit var apiInteractor: OTPApiInteractor\n\n    private lateinit var viewModel: OtpViewModel\n\n    @Before\n    fun setUp() {\n        viewModel = OtpViewModel(apiInteractor)\n    }\n\n    @Test\n    fun `Test getOtpStatus`() = runBlocking {\n        val otpGenerationResponse = OTPGeneratorResponseModel()\n        val otpStatusResponse = OtpStatusResponseModel()\n        val itemType = ContactType.EMAIL\n\n        `when`(\n            apiInteractor.getOtpStatus(\n                OtpStatusRequestModel(viewModel.getConfigIdentifier(itemType))\n            )\n        ).thenReturn(Result.Success(otpStatusResponse))\n\n        viewModel.getOtpStatus(otpGenerationResponse, itemType)\n\n        verify(apiInteractor).getOtpStatus(OtpStatusRequestModel(viewModel.getConfigIdentifier(itemType)))\n        assertEquals(viewModel.getOtpStatusLiveData().value, UiStates.Success(otpStatusResponse))\n\n    }\n}"},{"role":"user","content":"class TestViewModel():ViewModel(){\nprivate fun addHeaderWrtAddressItem(data: MutableList<AddressItem>) {\nif (!data.contains(AddressItem (AddressType.HOME, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.HOME, AddressRowType.ADD_HOME_ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.PERMANENT, AddressRowType.HEADER))) {\ndata.addAll(addAddress (AddressType.PERMANENT, AddressRowType.ADD_PERMANENT ADDRESS))\n}\n\nif (!data.contains(AddressIten (AddressType.MAILING, Address RowType.HEADER)))\ndata.addAll(addAddress(AddressType.MAILING, AddressRowType.ADD_MAILING))\n}\n\ndata.sortBy {\nwhen (it.addressType) {\nAddressType.HOME-> Constants.ZERO_COUNT\nAddressType.PERMANENT -> Constants.INT ONE\nAddressType.MAILING-> Constants.INT_TWO\nelse \nConstants.INT_NEGATIVE ONE\n}\n}\nreturn nonAadhaarAddressItemsData.value = data\n}\n\nprivate fun mapPermanentAddress(addressDetails: AddressDetails,data: MutableList<AddressItem>) {\n\taddressDetails.address Detail?.let {\n\t\t\t\tval fullAddress =\n\t\t\t\taddressDetails.addressDetail.convertToFullAddress( true, \n\t\t\t\tcallback.getDeviceLocale())\n\tdata.apply {\n\t\tadd (AddressItem(Address Type.PERMANENT, AddressRowType.HEADER))\n\t\tadd(createAddressItem (AddressType.PERMANENT, addressDetails, fullAddress))\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\n\t\t\n﻿\nfun setNonAadhaarAddressItem(addressItems: List<Address Details>, address: List<AddressItem>) {\nval data = mutableListOf<AddressItem>()\ndata.addAll(address)\n(addressItems as MutableList<Address Details>).let {\nnonAadhaarAddressDetailsList.value = it\n}\n\naddressItems.forEach { addressItem -> when (addressItem.purpose) {\nAddressType.PERMANENT.getValue()->{ mapPermanent Address (addressItem, data)\n}\n}\n}\naddHeaderWrtAddressItem(data)\n}\n\n\n﻿\nclass CustomerContactMockData {\ncompanion object {\nfun getNonAadhaarAddressItems(): List<AddressDetails> {\nval addressDetail AddressDetail (street1= \"a\", street2= \"b\", street3= \"c\", street4 = \"d\", street = \"e\", postalCode=\"f\",countryCode = \"g\", city=\"h\", provinceCode=\"i\", addressFormat = \"j\", countryName=\"k\", addressUsabilityCode = \"1\", type=\"n\", label = \"n\")\nval addressDetaill = AddressDetails (purpose\nval addressDetail2 = AddressDetails (purpose\nAddressType.HOME.getValue(), addressDetail addressDetail) AddressType.PERMANENT.getValue(), addressDetail addressDetail) AddressType.MAILING.getValue(), address Detail addressDetail)\nval addressDetails]= AddressDetails (purpose\nreturn arrayListOf(addressDetail1, addressDetail2, addressDetail3)\n}\n\nfun getAddressTypeItems(): List<AddressItem> {\nval addressDetail AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", address Type AddressType.HOME, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail1 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.PERMANENT, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nval addressDetail2 = AddressItem(addressDetail = \"60 Queen Victoria Street, M48185\", addressType = AddressType.MAILING, isRepeatedHomeAdd = false, addressRowType = AddressRowType.HEADER)\nreturn arrayListOf(addressDetail, addressDetail1, addressDetail2)\n}\n}\n}\n\n\nenum class OTPRequestType: RequestType {\nOTP GENERATION,\nOTP_VERIFICATION,\nOTP STATUS\n}\n\n﻿\n\nclass OtpViewModel @Inject constructor(\nprivate val apiInteractor: OTPApiInteractor,\nprivate val contactDetailsCallbac: Contact DetailsCallback\n): ViewModel() {\n\nval otpGenerationMutableLiveData by lazy {SingleLiveEvent<UiStates<OTPGenerator ResponseModel>>() }\n\nfun get0tpGenerationLiveData() = otpGenerationMutableLiveData.asLiveData()\n\nval otpStatusMutableLiveData by lazy SingleLiveEvent<UiStates<0tpStatus ResponseModel>>() }\nfun getOtpStatusLiveData() = otpStatusMutableLiveData.asLiveData()\n\n@VisibleForTesting\nfun getConfigIdentifier (itemType: ContactType?)= when (itemType) {\nContactType.EMAIL, ContactType.ADD_EMAIL -> {\nOtpViewModel.UPDATE_EMAIL\n}\n\nContactType.PHONE -> {\nOtpViewModel.UPDATE_PHONE\n}\n\nelse -> Constants. EMPTY\n}\n\n\n@VisibleForTesting\nfun update0TPGenerationViewState (uiStates: UiStates<OTPGeneratorResponseModel>) { \notpGenerationMutableLiveData.value = uiStates\n}\n\n\n@visibleForTesting(otherwise VisibleForTesting.PRIVATE)\nfun update0tpStatusViewState(success: UiStates.Success<0tpStatusResponseModel>) {\notpStatusMutableLiveData.value = success\n}\n\n\n\n@VisibleForTesting (otherwise VisibleForTesting.PRIVATE)\nfun getOtpStatus(otpGenerationResponse: OTPGeneratorResponseModel, itenType: ContactType?= null) {\nviewModelScope. Launch {\nval result apiInteractor.getOtpStatus(OtpStatusRequestModel(getConfigIdentifier (itenType))) \nif (result is Result.Success){\nupdateOTPGenerationViewState (UiStates. Success (otpGenerationResponse))\nupdateDtpStatusViewState (UiStates. Success (result.data))\n}\n}"},{"role":"assistant","content":"import androidx.arch.core.executor.testing.InstantTaskExecutorRule\nimport androidx.lifecycle.Observer\nimport com.nhaarman.mockitokotlin2.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.test.*\nimport org.junit.After\nimport org.junit.Before\nimport org.junit.Rule\nimport org.junit.Test\nimport org.mockito.Mock\nimport org.mockito.MockitoAnnotations\n\n@ExperimentalCoroutinesApi\nclass OtpViewModelTest {\n\n    @get:Rule\n    val instantExecutorRule = InstantTaskExecutorRule()\n\n    @get:Rule\n    val coroutineScope = TestCoroutineScope()\n\n    @Mock\n    private lateinit var apiInteractor: OTPApiInteractor\n\n    @Mock\n    private lateinit var contactDetailsCallback: ContactDetailsCallback\n\n    @Mock\n    private lateinit var otpGenerationObserver: Observer<UiStates<OTPGeneratorResponseModel>>\n\n    @Mock\n    private lateinit var otpStatusObserver: Observer<UiStates<OtpStatusResponseModel>>\n\n    private lateinit var viewModel: OtpViewModel\n\n    @Before\n    fun setup() {\n        MockitoAnnotations.initMocks(this)\n        viewModel = OtpViewModel(apiInteractor, contactDetailsCallback)\n        viewModel.otpGenerationMutableLiveData.observeForever(otpGenerationObserver)\n        viewModel.otpStatusMutableLiveData.observeForever(otpStatusObserver)\n    }\n\n    @After\n    fun cleanup() {\n        viewModel.otpGenerationMutableLiveData.removeObserver(otpGenerationObserver)\n        viewModel.otpStatusMutableLiveData.removeObserver(otpStatusObserver)\n        coroutineScope.cleanupTestCoroutines()\n    }\n\n    @Test\n    fun `Test getConfigIdentifier for EMAIL`() {\n        val itemType = ContactType.EMAIL\n        val configIdentifier = viewModel.getConfigIdentifier(itemType)\n        assert(configIdentifier == OtpViewModel.UPDATE_EMAIL)\n    }\n\n    @Test\n    fun `Test getConfigIdentifier for PHONE`() {\n        val itemType = ContactType.PHONE\n        val configIdentifier = viewModel.getConfigIdentifier(itemType)\n        assert(configIdentifier == OtpViewModel.UPDATE_PHONE)\n    }\n\n    @Test\n    fun `Test getConfigIdentifier for other types`() {\n        val itemType = ContactType.ADD_EMAIL\n        val configIdentifier = viewModel.getConfigIdentifier(itemType)\n        assert(configIdentifier == Constants.EMPTY)\n    }\n\n    @Test\n    fun `Test updateOtpGenerationViewState`() {\n        val uiStates = UiStates.Success(OTPGeneratorResponseModel())\n        viewModel.updateOtpGenerationViewState(uiStates)\n        verify(otpGenerationObserver).onChanged(uiStates)\n    }\n\n    @Test\n    fun `Test updateOtpStatusViewState`() {\n        val uiStates = UiStates.Success(OtpStatusResponseModel())\n        viewModel.updateOtpStatusViewState(uiStates)\n        verify(otpStatusObserver).onChanged(uiStates)\n    }\n\n    @Test\n    fun `Test getOtpStatus`() = coroutineScope.runBlockingTest {\n        val otpGenerationResponse = OTPGeneratorResponseModel()\n        val otpStatusResponse = OtpStatusResponseModel()\n        val itemType = ContactType.EMAIL\n\n        whenever(apiInteractor.getOtpStatus(OtpStatusRequestModel(viewModel.getConfigIdentifier(itemType))))\n            .thenReturn(Result.Success(otpStatusResponse))\n\n        viewModel.getOtpStatus(otpGenerationResponse, itemType)\n\n        verify(apiInteractor).getOtpStatus(OtpStatusRequestModel(viewModel.getConfigIdentifier(itemType)))\n        verify(otpGenerationObserver).onChanged(any())\n        verify(otpStatusObserver).onChanged(UiStates.Success(otpStatusResponse))\n    }\n}"}
        ]
    )
    JAVA = ("Java", [
            {"role": "system", "content": "You are an experienced Java Developer. You are expert in writing the JUnit test cases by using Mockito. Write JUnit test case for given java function."},
            {"role": "user", "content": " public int fibonacci(int n, int[] memo) \n    { \n        if (memo[n] != 0) \n            return memo[n]; \n        if (n == 1 || n == 2) \n            return 1; \n        else { \n            memo[n] = fibonacci(n - 1, memo) \n                      + fibonacci(n - 2, memo); \n            return memo[n]; \n        } \n    } "},
            {"role": "assistant", "content": "  @Test\n    public void calculate_0() {\n        int testIndex = 0;\n        int expectedResult = 1;\n\n        assertEquals(expectedResult, fibonacci.calculate(testIndex));\n    }"},
            {"role": "user", "content": "public int fibonacci(int n, int[] memo)   \n    {   \n        if (memo[n] != 0)   \n            return memo[n];   \n        if (n == 1 || n == 2)   \n            return 1;   \n        else {   \n            memo[n] = fibonacci(n - 1, memo)   \n                      + fibonacci(n - 2, memo);   \n            return memo[n];   \n        }   \n    }"},
            {"role": "assistant", "content": "To write JUnit test cases for the given `fibonacci` method, we can use Mockito to mock the `memo` array and verify its behavior.\n\nHere is an example of how the JUnit test case can be written using Mockito:\n\n```java\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class FibonacciTest {\n    private Fibonacci fibonacci;\n\n    @Before\n    public void setUp() {\n        fibonacci = new Fibonacci();\n    }\n\n    @Test\n    public void testFibonacci() {\n        int n = 5;\n        int[] memo = new int[n + 1];\n\n        // Mock the memo array\n        int[] mockedMemo = spy(memo);\n        doReturn(0).when(mockedMemo).getValue(anyInt());\n\n        // Call the fibonacci method\n        int result = fibonacci.fibonacci(n, mockedMemo);\n\n        // Verify the behavior\n        verify(mockedMemo, times(n + 1)).getValue(anyInt());\n        verify(mockedMemo, times(n)).setValue(anyInt(), anyInt());\n\n        // Check the result\n        assertEquals(5, result);\n    }\n}\n```\n\nIn this test case, we are creating a mock of the `memo` array using Mockito's `spy` method. We then use Mockito's `doReturn` and `when` methods to specify the behavior of the `memo` array. We verify that the `getValue` method is called `n + 1` times and the `setValue` method is called `n` times. Finally, we check if the result of the `fibonacci` method is as expected."},
            {"role":"user","content":"funtion GFG(){\n ArrayList<Integer> arr = new ArrayList<>(); \n        arr.add(1); \n        arr.add(2); \n        arr.add(3); \n        arr.add(4); \n        arr.add(5); \n  \n        Iterator<Integer> it = arr.iterator(); \n        while (it.hasNext()) { \n            if (it.next() == 2) { \n                // will not throw Exception \n                it.remove(); \n            } \n        } \n  \n        System.out.println(arr); \n  \n        it = arr.iterator(); \n        while (it.hasNext()) { \n            if (it.next() == 3) { \n                // will throw Exception on \n                // next call of next() method \n                arr.remove(3); \n            } \n        } \n    } \n}"},{"role":"assistant","content":"import org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class YourTestClass {\n\n    @Test\n    public void testGFG_RemoveElement() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        List<Integer> result = GFG.removeElement(arr, 2);\n\n        // Assert\n        assertEquals(List.of(1, 3, 4, 5), result);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testGFG_RemoveElementException() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        GFG.removeElement(arr, 3);\n    }\n}\n"},{"role":"user","content":"function GFG(){\n ArrayList<Integer> arr = new ArrayList<>(); \n        arr.add(1); \n        arr.add(2); \n        arr.add(3); \n        arr.add(4); \n        arr.add(5); \n  \n        Iterator<Integer> it = arr.iterator(); \n        while (it.hasNext()) { \n            if (it.next() == 2) { \n                // will not throw Exception \n                it.remove(); \n            } \n        } \n  \n        System.out.println(arr); \n  \n        it = arr.iterator(); \n        while (it.hasNext()) { \n            if (it.next() == 3) { \n                // will throw Exception on \n                // next call of next() method \n                arr.remove(3); \n            } \n        } \n    } \n}"},{"role":"assistant","content":"import org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class YourTestClass {\n\n    @Test\n    public void testGFG_RemoveElement() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        List<Integer> result = GFG.removeElement(arr, 2);\n\n        // Assert\n        assertEquals(List.of(1, 3, 4, 5), result);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testGFG_RemoveElementException() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        GFG.removeElement(arr, 3);\n    }\n\n    @Test\n    public void testGFG_RemoveElement_FirstElement() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        List<Integer> result = GFG.removeElement(arr, 1);\n\n        // Assert\n        assertEquals(List.of(2, 3, 4, 5), result);\n    }\n\n    @Test\n    public void testGFG_RemoveElement_LastElement() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        List<Integer> result = GFG.removeElement(arr, 5);\n\n        // Assert\n        assertEquals(List.of(1, 2, 3, 4), result);\n    }\n\n    @Test\n    public void testGFG_RemoveElement_MiddleElement() {\n        // Arrange\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n\n        // Act\n        List<Integer> result = GFG.removeElement(arr, 3);\n\n        // Assert\n        assertEquals(List.of(1, 2, 4, 5), result);\n    }\n}"}
        ]
    )
    PYTHON = ("Python", [
            {"role": "system", "content": "You are an experienced Python Developer. You are expert in writing the Unit cases. Write unit test case for given python function."}
        ]
    )
    SWIFT = ("Swift", [
            {"role": "system", "content": "You are an experienced iOS Developer. You are expert in writing the Unit and UI test cases. Write unit test case for given swift function."}
        ]
    )


class LanguageMessages(object):
    def __init__(self, language, messages):
        self._language = language
        self._messages = messages
        self._observers = []

    @property
    def language(self):
        return self._language

    @language.setter
    def language(self, value):
        self._language = value
        for callback in self._observers:
            callback(self._language)

    def bind_to(self, callback):
        self._observers.append(callback)


class ModelType(Enum):
    GPT_35_TURBO_16K = ('gpt-35-turbo-16k', 'testing0613')
    GPT_35_TURBO = ('gpt-35-turbo', 'testinggpt35turbo')
